---
layout: base.liquid
title: pyribs
description: A bare-bones Python library for quality diversity optimization.
changeFreq: weekly
tutorials:
  - name: Using CMA-ME to Land a Lunar Lander Like a Space Shuttle
    url: https://docs.pyribs.org/en/stable/tutorials/lunar_lander.html
    img: /imgs/lunar-lander.png
  - name: Upgrading CMA-ME to CMA-MAE on the Sphere Benchmark
    url: https://docs.pyribs.org/en/stable/tutorials/cma_mae.html
    img: /imgs/cma-mae-sphere.png
  - name: Generating Tom Cruise Images with Differentiable Quality Diversity
    url: https://docs.pyribs.org/en/stable/tutorials/tom_cruise_dqd.html
    img: /imgs/tom-cruise-dqd.png
  - name: Exploring Deceptive Mazes with Novelty Search
    url: https://docs.pyribs.org/en/stable/tutorials/ns_maze.html
    img: /imgs/ns-maze.svg
  - name: |
      Incorporating Human Feedback into Quality Diversity for Diversified
      Text-to-Image Generation
    url: https://docs.pyribs.org/en/stable/tutorials/qdhf.html
    img: /imgs/qdhf.jpg
  - name: Scaling CMA-MAE on the Sphere Benchmark
    url: https://docs.pyribs.org/en/stable/tutorials/scalable_cma_mae.html
    img: /imgs/cma-mae-sphere.png
  - name: Illuminating the Latent Space of an MNIST GAN
    url: https://docs.pyribs.org/en/stable/tutorials/lsi_mnist.html
    img: /imgs/lsi-mnist.png
    pixelate: true
  - name: Learning a Repertoire of Robot Arm Configurations
    url: https://docs.pyribs.org/en/stable/tutorials/arm_repertoire.html
    img: /imgs/arm-repertoire-example.png
  - name: Generating Images to Fool an MNIST Classifier
    url: https://docs.pyribs.org/en/stable/tutorials/fooling_mnist.html
    img: /imgs/fooling-mnist.png
    pixelate: true
install:
  choices:
    - name: Distribution
      opts:
      - name: Base
        id: i-base
        checked: true
      - name: Visualize
        id: i-visualize
      - name: All
        id: i-all
    - name: Package
      opts:
      - name: Pip
        id: i-pip
        checked: true
      - name: Conda
        id: i-conda
      - name: Source
        id: i-source
  commands:
    - ids: [i-base, i-pip]
      steps:
      - "pip install ribs"
    - ids: [i-visualize, i-pip]
      steps:
      - "# If you are on Mac, you may need to use quotations, e.g., pip install \"ribs[visualize]\""
      - "pip install ribs[visualize]"
    - ids: [i-all, i-pip]
      steps:
      - "# If you are on Mac, you may need to use quotations, e.g., pip install \"ribs[all]\""
      - "pip install ribs[all]"
    - ids: [i-base, i-conda]
      steps:
      - "conda install -c conda-forge pyribs"
    - ids: [i-visualize, i-conda]
      steps:
      - "conda install -c conda-forge pyribs-visualize"
    - ids: [i-all, i-conda]
      steps:
      - "conda install -c conda-forge pyribs-all"
    - ids: [i-base, i-source]
      steps:
      - git clone https://github.com/icaros-usc/pyribs
      - cd pyribs
      - pip install .
    - ids: [i-visualize, i-source]
      steps:
      - git clone https://github.com/icaros-usc/pyribs
      - cd pyribs
      - pip install .[visualize]
    - ids: [i-all, i-source]
      steps:
      - git clone https://github.com/icaros-usc/pyribs
      - cd pyribs
      - pip install .[all]
---

<div class="__index__">
  {% comment %} Logo and Background Video {% endcomment %}
  <div class="block relative p-5 bg-black"
       style="min-height: 40vw">
    {% comment %}
      101% height to hide the background, which sometimes shows up a bit.
    {% endcomment %}
    <video src="{{ "/imgs/lunar-lander.mp4" | url }}"
           type="video/mp4"
           autoplay muted playsinline loop preload="auto"
           class="absolute top-0 left-0 object-cover object-bottom
                   w-full"
           style="height: 101%">
    </video>
    <div class="my-24 relative">
      <img class="mx-auto mb-4 font-thin w-full max-w-lg"
           src="{{- "/imgs/logo.svg" | url -}}"
           alt="{{- title -}}"
      />
      <p class="text-2xl mb-4 text-white text-center">{{- description -}}</p>
      <div class="flex flex-wrap justify-center mx-auto">
        <a href="#installation"
           title="Install pyribs"
           class="header-link h-12 w-5/6 sm:w-36 rounded-full mb-2.5">
          Install
        </a>
        <a href="https://docs.pyribs.org/en/stable/tutorials.html"
           title="Visit the tutorials"
           class="header-link h-12 w-5/6 sm:w-36 rounded-full mb-2.5">
          Tutorials
        </a>
        <a href="https://discord.gg/QxhcJSqZ8G"
           title="Community Discord"
           class="header-link h-12 w-5/6 sm:w-36 rounded-full mb-2.5">
          Discord
        </a>
      </div>
      <div class="flex flex-wrap justify-center mx-auto">
        {%- for s in config.social -%}
          <a href="{{- s.url | url -}}"
             title="{{- s.name -}}"
             class="header-link h-12 w-12 rounded-full">
            <i class="{{ s.fa }} mx-auto"></i>
          </a>
        {%- endfor -%}
      </div>
    </div>
  </div>

  <div class="bg-white feature">
    <div class="feature-content lg:flex lg:items-center">
      <div class="lg:w-1/3 lg:pr-2">
        <h2>Efficient Illumination</h2>
        <p class="mb-4">
          pyribs is the official implementation of Covariance Matrix Adaptation
          MAP-Elites (CMA-ME) and other
          <a href="https://docs.pyribs.org/en/stable/index.html#overview">
            quality diversity optimization
          </a> algorithms.
        </p>
      </div>
      <div class="lg:w-2/3">
        <video src="{{ "/imgs/comparison.mp4" | url }}"
               type="video/mp4"
               autoplay muted playsinline loop
               class="hidden sm:block mx-auto">
        </video>
        {% comment %}
          These show two portions of the same video, so that the heatmaps can be
          stacked. The padding-bottom is based on video size.
        {% endcomment %}
        <div class="block sm:hidden mx-auto"
             style="width: 90vw; height: calc(660/800 * 90vw);">
          <video autoplay muted playsinline loop
                 class="object-cover object-left"
                 style="height: calc(660/800 * 90vw);">
            <source src="{{ 'imgs/comparison.mp4' | url }}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        </div>
        <div class="block sm:hidden mx-auto"
             style="width: 90vw; height: calc(660/800 * 90vw);">
          <video autoplay muted playsinline loop
                 class="object-cover object-right"
                 style="height: calc(660/800 * 90vw);">
            <source src="{{ 'imgs/comparison.mp4' | url }}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        </div>
      </div>
    </div>
  </div>

  <div class="bg-gray-100 feature">
    <div class="feature-content">
      <h2>Flexible Components</h2>
      <p>
        Every quality diversity (QD) algorithm in pyribs consists of three
        components.
      </p>
      <div class="lg:flex">
        <div class="component lg:pr-4">
          <div class="shadow">
{% clipboard %}
{% highlight python %}
from ribs.archives import GridArchive

archive = GridArchive(
    solution_dim=10,
    dims=[20, 20],
    ranges=[(-1, 1), (-1, 1)],
)
{% endhighlight %}
{% endclipboard %}
            <p class="p-3 lg:h-28 bg-white">
              The
              <a href="https://docs.pyribs.org/en/stable/api/ribs.archives.html">Archive</a>
              is a data structure that stores solutions generated by the QD
              algorithm.
            </p>
          </div>
        </div>

        <div class="component lg:px-2">
          <div class="shadow">
{% clipboard %}
{% highlight python %}
from ribs.emitters import EvolutionStrategyEmitter

emitters = [
    EvolutionStrategyEmitter(
        archive,
        x0=[0.0] * 10,
        sigma0=0.1,
        batch_size=36,
    ) for _ in range(3)
]
{% endhighlight %}
{% endclipboard %}
            <p class="p-3 lg:h-28 bg-white">
              <a href="https://docs.pyribs.org/en/stable/api/ribs.emitters.html">
              Emitters</a> generate new candidate solutions.
            </p>
          </div>
        </div>

        <div class="component lg:pl-4">
          <div class="shadow">
{% clipboard %}
{% highlight python %}
from ribs.schedulers import Scheduler

scheduler = Scheduler(archive, emitters)
{% endhighlight %}
{% endclipboard %}
            <p class="p-3 lg:h-28 bg-white">
              The <a href="https://docs.pyribs.org/en/stable/api/ribs.schedulers.html">
              Scheduler</a> facilitates the interaction of the archive and
              emitters and acts as a scheduling algorithm for emitters.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="bg-white feature">
    <div class="feature-content md:flex md:items-center">
      <div class="md:w-1/3 md:inline-block md:pr-4">
        <h2>Intuitive Usage</h2>
        <p class="md:pb-4">
          pyribs components come together in an intuitive ask-tell interface
          inspired by <a href="https://pypi.org/project/cma/">pycma</a>.
        </p>
      </div>
      <div class="md:w-2/3 md:inline-block md:pl-2">
        <div class="my-5">
{% clipboard %}
{% highlight python %}
import numpy as np

for itr in range(1000):
    solutions = scheduler.ask()

    # Optimize the 10D negative Sphere function.
    objectives = -np.sum(np.square(solutions), axis=1)

    # Measures: first 2 coordinates of each 10D solution.
    measures = solutions[:, :2]

    scheduler.tell(objectives, measures)
{% endhighlight %}
{% endclipboard %}
        </div>
      </div>
    </div>
  </div>

  <div class="bg-gray-100 feature">
    <div class="feature-content lg:flex lg:items-center">
      <div class="lg:w-1/2 lg:pr-4">
        <h2>Insightful Visualizations</h2>
        <p>
          The pyribs
          <a href="https://docs.pyribs.org/en/stable/api/ribs.visualize.html">
          visualize</a> module integrates with
          <a href="https://matplotlib.org/">Matplotlib</a> to plot a heatmap of the
          archive after each experiment.
        </p>
        <div class="my-5">
{% clipboard %}
{% highlight python %}
import matplotlib.pyplot as plt
from ribs.visualize import grid_archive_heatmap

grid_archive_heatmap(archive)
plt.show()
{% endhighlight %}
{% endclipboard %}
        </div>
      </div>
      <div class="lg:w-1/2">
        <img class="mx-auto xl:w-5/6"
             alt="Grid Archive Heatmap for the Sphere function"
             src="{{ 'imgs/sphere-heatmap.png' | url }}" />
      </div>
    </div>
  </div>

  <div class="bg-white feature" id="installation">
    <div class="feature-content lg:flex lg:items-center">
      <div class="lg:w-1/3 mb-4 lg:pr-6">
        <h2>Easy Installation</h2>
        <p>
          pyribs supports Python 3.9 and above. The <i>visualize</i>
          distribution additionally installs visualization dependencies such as
          Matplotlib, while <i>all</i> installs all extra dependencies.
          <i>ribs[visualize]</i> should be sufficient for most users.
        </p>
      </div>
      <div class="lg:w-2/3 flex">

        <div class="w-full flex flex-wrap">
          {%- for choice in install.choices -%}
          <p class="w-full lg:w-12/60
                    border-black border-b lg:border-4 lg:border-white
                    my-2 lg:my-0 lg:py-2">
          {{- choice.name -}}
          </p>

          {% comment %}
            Name takes up 12/60, so each part here takes up some portion of 48.

            Including these here so that Tailwind picks them up and does not
            purge them (this is important because optWidth is a variable value
            below).

              lg:w-12/60  lg:w-16/60  lg:w-24/60  lg:w-48/60
          {% endcomment %}
          {%- assign optWidth = 48 | divided_by: choice.opts.size -%}

          {%- for opt in choice.opts -%}
          <input type="radio" id="{{- opt.id -}}" name="{{- choice.name -}}"
                 {% if opt.checked %}checked="checked"{% endif %}
                 class="hidden">
          <label for="{{- opt.id -}}"
                 class="bg-gray-100 hover:bg-gray-200
                        w-full lg:w-{{- optWidth -}}/60 pl-4 py-2
                        border-4 border-white cursor-pointer">
            {{- opt.name -}}
          </label>
          {%- endfor -%}
          {%- endfor -%}

          <p class="w-full border-black border-b my-2 lg:mx-1 lg:mt-4">
            Command
          </p>

          {%- for cmd in install.commands -%}
          {%- assign cmd_id = cmd.ids | join: "_" -%}
          <div id="{{- cmd_id -}}" class="w-full hidden border-4 border-white">
            {% comment %}
              Manually highlight the code block because variables like cmd.steps
              would be treated as raw in a highlight tag / shortcode.
            {% endcomment %}
{% clipboard %}
<pre class="language-bash"><code class="language-bash">
{%- for s in cmd.steps -%}<span class="token">{{- s -}}</span><br/>{%- endfor -%}
</code></pre>
{% endclipboard %}
          </div>
          <style>
            {% comment %}
              Style which displays the command when appropriate buttons are
              selected.
            {% endcomment %}
            #{{ cmd.ids | join: ":checked ~ #" }}:checked ~ #{{ cmd_id }} {
              display: block;
            }
          </style>
          {%- endfor -%}
        </div>

      </div>
    </div>
  </div>

  <div class="bg-gray-100 feature">
    <div class="feature-content pb-2">
      <h2>Comprehensive Tutorials</h2>
      <p>
        Learn more about pyribs in the
        <a href="https://docs.pyribs.org/en/stable/tutorials.html">tutorials</a>.
        All tutorials are also available on
        <a href="https://colab.research.google.com/github/icaros-usc/pyribs/blob/master/">
        Google Colab</a>.
      </p>
      <ul class="grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-4
                  gap-x-4 gap-y-4 mt-8 max-w-full mx-auto">
      {%- for t in tutorials -%}
        <li>
          <a class="w-3/4 sm:w-full block mx-auto
                    cursor-pointer shadow bg-white group default"
             href="{{ t.url | url }}">
            <img class="w-full"
                 style="{%- if t.pixelate -%}image-rendering: pixelated{%- endif -%}"
                 alt="{{ t.name }}" src="{{ t.img | url }}" />
            <p class="text-center bg-white group-hover:bg-gray-100 p-4 border-t-2 border-gray-100">
              {{- t.name -}}
            </p>
          </a>
        </li>
      {%- endfor -%}
      </ul>
    </div>
  </div>

</div>
